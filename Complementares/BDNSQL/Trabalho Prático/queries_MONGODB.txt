/* [1] Apresentar os detalhes de todos os departamentos ordenadas por ordem ascendente pelo nome deste */
db.hr.distinct("department").sort()

/* [2] Apresentar o nome do departamento e o quem esta responsavel por este */
db.hr.aggregate([{$group: {_id: null, departments: {$addToSet: {_id:"$department.department_id", department: "$department.name", manager:"$department.manager"}}}}, {$project: {_id:0}}]).pretty()

/* [3] Apresentar o nome do departamento e o numero de funcionarios nesse departamento */
db.hr.aggregate([ {$group: {_id: "$department.name", funcionarios: {$sum: 1}}}, {$match: {_id: {$ne: null}}}]).pretty()

/* [4] Apresentar o manager ID e numero de funcionarios geridos por este */
db.hr.aggregate([ {$group: {_id: "$manager_id", count: {$sum: 1}}}]).pretty()

/* [5] Apresentar os detalhes dos funcionarios cuja percentagem de comissao e nula e o salario esta entre 10000 e 15000 e o manager e o 101 */
db.hr.find({$and: [{salary: {$gte: 10000}}, {salary: {$lte: 15000}}, {manager_id: 101}]}).pretty()

/* [6] Apresentar os funcionarios cujo primeiro e ultimo nome começam pela letra G */
db.hr.find({$and:[{first_name: {$regex: "G"}},{last_name: {$regex: "G"}}]}).pretty()

/* [7] Apresentar todos os empregados que entraram para a empresa apos 19 de Dezembro de 2007 */
db.hr.find({$and: [{hire_date: {$gte: "2007-12-19"}}]}).pretty()

/* [8] Apresentar o nome (primeiro + ultimo) dos funcionários que foram contratados em 2008 */
db.hr.find({$and: [{hire_date: {$gte: "2008-01-01"}}, {hire_date: {$lte: "2008-12-31"}}]},{_id:0, first_name:1, last_name:1, hire_date:1}).pretty()
db.hr.find( {hire_date: {$regex: /2008/}},{first_name:1,last_name:1,hire_date:1}).pretty()

/* [9] Apresentar quantos funcionarios foram admitidos em cada mes no ano 2008 */
db.hr.aggregate([{$match: {$and: [{hire_date: {$gte: "2008-01-01"}}, {hire_date: {$lte: "2008-12-31"}}]}}, {$addFields: {mes: {$arrayElemAt: [ { $split: ["$hire_date", "-"]},1]}}}, {$group: {_id: "$mes", funcionarios: {$sum:1}}}]).pretty()

/* [10] Apresentar o nome dos funcionarios que iniciaram funcoes antes do manager */
-- Teria que percorrer 2x a bd, ou adicionar ao documento a hire_date do manager.

/* [11] Apresentar o cargo, numero de funcionarios, o somatorio dos salarios e a diferenca entre o maior salario e o menor dos funcionarios desse cargo */
db.hr.aggregate([{$group:{_id:"$job.title", nFuncionarios: {$sum:1}, sumSalary: {$sum: "$salary"}, salarios: {$push: "$salary"}}}, {$addFields: {diferençaSalarios: {$subtract: [{$max: "$salarios"},{$min: "$salarios"}]}}}]).pretty() 

/* [12] Apresentar o nome do funcionario que sejam Programmer ou President */
db.hr.find({$or:[{"job.title":"President"},{"job.title":"Programmer"}]},{first_name:1,last_name:1,"job.title":1}).pretty()

/* [13] Apresentar o titulo do cargo e media dos salarios */
db.hr.aggregate([ { $group: { _id:"$job.title",avgSalary: {$avg: "$salary"}}}]).pretty()

/* [14] Apresentar o primeiro nome do funcionario juntamente com o seu cargo e com a sua experiencia, do mais experiente para o menos experiente (por ordem descendente) */
db.hr.aggregate([{$project:{_id:1, name: {$concat: ["$first_name"," ", "$last_name"]}, hire_date:1}}, {$sort: {hire_date:1}}]).pretty()

/* [15] Apresentar todos os cargos cujo salario maximo seja menor ou igual que 6000 */
db.hr.find({"job.max_salary": {$lte: 6000} }).pretty()

/* [16] Apresentar o cargo e a diferenca entre o salario maximo e minimo para posicoes cujo salario maximo esta entre 6000 e 10000 */
db.hr.aggregate([{$match:{$and: [{"job.max_salary": {$gte: 6000}}, {"job.max_salary": {$lte: 10000}}]}}, {$project:{_id:"$job.title", max_salary: "$job.max_salary", min_salary: "$job.min_salary", diferençaSalarios: {$subtract: ["$job.max_salary","$job.min_salary"]}}}]).pretty()

/* [17] Apresentar o id dos funcionarios que fizeram mais que um cargo no passado */
db.hr.find({'history.1':{$exists:true}},{_id:1,first_name:1,last_name:1,history:1}).pretty()

/* [18] Apresentar os detalhes da posicao que tenha sido executada por qualquer funcionario que atualmente recebe mais que 10000 de salario */
db.hr.aggregate([ {$match: {salary: {$gte: 10000}}}, {$project: {_id:1, name: {$concat: ["$first_name"," ", "$last_name"]}, salary:1, history:1}}]).pretty() 

/* [19] Apresentar os detalhes do atual cargo dos funcionarios que trabalharam como IT Programmers no passado */
db.hr.find({"history": { $elemMatch: {job_title:"Programmer",department_name:"IT"}}},{}).pretty()

/* [20] Apresentar o pais e o numero de cidades existentes em cada pais */
db.hr.aggregate([{ $group:{_id:'$department.country_name', cities: {$addToSet: '$department.city'}}}, {$addFields: {nmrcidades: {$size: "$cities"}}}]).pretty()

/* [21] Apresentar o nome da regiao, nome do pais, nome da cidade, nome do departamento e do gestor deste juntamente com o seu cargo */
db.hr.find({},{_id:1, first_name:1, last_name:1,"job.title":1, "department.name":1, "department.manager":1, "department.city":1, "department.country_name":1, "department.region_name":1}).pretty()

/* [22] Apresentar o nome do funcionario e o pais onde esta a trabalhar */
db.hr.find({},{_id:1, first_name:1, last_name:1, "department.country_name":1}).pretty()

/* [23] Apresentar o nome do pais, cidade e numero de departamentos que possuem mais de 5 funcionarios */
db.hr.aggregate([ {$group: {_id: "$department.name", country: {$addToSet: "$department.country_name"}, city: {$addToSet: "$department.city"}, funcionarios: {$sum: 1}}}, {$match: {funcionarios: {$gte:5}}}]).pretty()
