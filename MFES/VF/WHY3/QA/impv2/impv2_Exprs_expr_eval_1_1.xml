<theory name="expr_eval_1"><realized><require name="why3.BuiltIn.BuiltIn"/><require name="int.Int"/><require name="map.Map"/><require name="map.Const"/></realized><typedecl name="unit" altname="unit" path="why3.Unit.Unit"><params/><prodt/></typedecl><typedecl name="ident" altname="ident"><params/></typedecl><param name="mk_ident" altname="mk_ident"><fun><type name="Int.int"/><type name="ident" local="true"/></fun></param><datatypes><datatype name="operator" altname="operator"><params/><constrs><constr name="Oplus" altname="Oplus"/><constr name="Ominus" altname="Ominus"/><constr name="Omult" altname="Omult"/></constrs></datatype></datatypes><datatypes><datatype name="expr" altname="expr"><params/><constrs><constr name="Econst" altname="Econst"><carg><type name="Int.int"/></carg></constr><constr name="Evar" altname="Evar"><carg><type name="ident" local="true"/></carg></constr><constr name="Ebin" altname="Ebin"><carg><type name="expr" local="true"/></carg><carg><type name="operator" local="true"/></carg><carg><type name="expr" local="true"/></carg></constr></constrs></datatype></datatypes><typedecl name="state" altname="state"><params/><fun><type name="ident" local="true"/><type name="Int.int"/></fun></typedecl><function><eqn altname="eval_expr"><app><const name="HOL.eq"/><app><var name="eval_expr"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="e"><type name="expr" local="true"/></var></app><case><var name="e"><type name="expr" local="true"/></var><pat><app><const name="Econst" local="true"><fun><type name="Int.int"/><type name="expr" local="true"/></fun></const><var name="c"><type name="Int.int"/></var></app><var name="c"><type name="Int.int"/></var></pat><pat><app><const name="Evar" local="true"><fun><type name="ident" local="true"/><type name="expr" local="true"/></fun></const><var name="c"><type name="ident" local="true"/></var></app><app><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c"><type name="ident" local="true"/></var></app></pat><pat><app><const name="Ebin" local="true"><fun><type name="expr" local="true"/><type name="operator" local="true"/><type name="expr" local="true"/><type name="expr" local="true"/></fun></const><var name="c"><type name="expr" local="true"/></var><var name="operator1"><type name="operator" local="true"/></var><var name="c1"><type name="expr" local="true"/></var></app><case><var name="operator1"><type name="operator" local="true"/></var><pat><const name="Oplus" local="true"><type name="operator" local="true"/></const><app><const name="Groups.plus_class.plus"/><app><var name="eval_expr"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c"><type name="expr" local="true"/></var></app><app><var name="eval_expr"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c1"><type name="expr" local="true"/></var></app></app></pat><pat><const name="Ominus" local="true"><type name="operator" local="true"/></const><app><const name="Groups.minus_class.minus"/><app><var name="eval_expr"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c"><type name="expr" local="true"/></var></app><app><var name="eval_expr"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c1"><type name="expr" local="true"/></var></app></app></pat><pat><const name="Omult" local="true"><type name="operator" local="true"/></const><app><const name="Groups.times_class.times"/><app><var name="eval_expr"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c"><type name="expr" local="true"/></var></app><app><var name="eval_expr"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c1"><type name="expr" local="true"/></var></app></app></pat></case></pat></case></app></eqn></function><definition altname="eval_bin"><app><const name="HOL.eq"/><app><var name="eval_bin"><fun><type name="Int.int"/><type name="operator" local="true"/><type name="Int.int"/><type name="Int.int"/></fun></var><var name="v1"><type name="Int.int"/></var><var name="op"><type name="operator" local="true"/></var><var name="v2"><type name="Int.int"/></var></app><case><var name="op"><type name="operator" local="true"/></var><pat><const name="Oplus" local="true"><type name="operator" local="true"/></const><app><const name="Groups.plus_class.plus"/><var name="v1"><type name="Int.int"/></var><var name="v2"><type name="Int.int"/></var></app></pat><pat><const name="Ominus" local="true"><type name="operator" local="true"/></const><app><const name="Groups.minus_class.minus"/><var name="v1"><type name="Int.int"/></var><var name="v2"><type name="Int.int"/></var></app></pat><pat><const name="Omult" local="true"><type name="operator" local="true"/></const><app><const name="Groups.times_class.times"/><var name="v1"><type name="Int.int"/></var><var name="v2"><type name="Int.int"/></var></app></pat></case></app></definition><inductive><pred name="eval_expr_rel" altname="eval_expr_rel"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred><rule name="econst" altname="econst"><prems/><app><var name="eval_expr_rel"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><app><const name="Econst" local="true"><fun><type name="Int.int"/><type name="expr" local="true"/></fun></const><var name="n"><type name="Int.int"/></var></app><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="n"><type name="Int.int"/></var></app></rule><rule name="evar" altname="evar"><prems/><app><var name="eval_expr_rel"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><app><const name="Evar" local="true"><fun><type name="ident" local="true"/><type name="expr" local="true"/></fun></const><var name="c"><type name="ident" local="true"/></var></app><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><app><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c"><type name="ident" local="true"/></var></app></app></rule><rule name="ebin" altname="ebin"><prems><app><var name="eval_expr_rel"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="x1"><type name="expr" local="true"/></var><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c1"><type name="Int.int"/></var></app><app><var name="eval_expr_rel"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></var><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="x2"><type name="expr" local="true"/></var><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c2"><type name="Int.int"/></var></app></prems><app><var name="eval_expr_rel"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><app><const name="Ebin" local="true"><fun><type name="expr" local="true"/><type name="operator" local="true"/><type name="expr" local="true"/><type name="expr" local="true"/></fun></const><var name="x1"><type name="expr" local="true"/></var><var name="op"><type name="operator" local="true"/></var><var name="x2"><type name="expr" local="true"/></var></app><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><app><const name="eval_bin" local="true"><fun><type name="Int.int"/><type name="operator" local="true"/><type name="Int.int"/><type name="Int.int"/></fun></const><var name="c1"><type name="Int.int"/></var><var name="op"><type name="operator" local="true"/></var><var name="c2"><type name="Int.int"/></var></app></app></rule></pred></inductive><axiom name="no_side_effects" altname="no_side_effects"><prems><app><const name="eval_expr_rel" local="true"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></const><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="e"><type name="expr" local="true"/></var><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="v"><type name="Int.int"/></var></app></prems><concls><app><const name="HOL.eq"/><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var></app></concls></axiom><lemma name="expr_eval_1" altname="expr_eval_1"><prems><app><const name="eval_expr_rel" local="true"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></const><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="x1"><type name="expr" local="true"/></var><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c1"><type name="Int.int"/></var></app><app><const name="HOL.implies"/><app><const name="HOL.eq"/><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var></app><app><const name="HOL.eq"/><var name="c1"><type name="Int.int"/></var><app><const name="eval_expr" local="true"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></const><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="x1"><type name="expr" local="true"/></var></app></app></app><app><const name="eval_expr_rel" local="true"><pred><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="Int.int"/></pred></const><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="x2"><type name="expr" local="true"/></var><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="c2"><type name="Int.int"/></var></app><app><const name="HOL.implies"/><app><const name="HOL.eq"/><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="s1"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var></app><app><const name="HOL.eq"/><var name="c2"><type name="Int.int"/></var><app><const name="eval_expr" local="true"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></const><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="x2"><type name="expr" local="true"/></var></app></app></app><app><const name="HOL.eq"/><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><var name="s"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var></app></prems><concls><app><const name="HOL.eq"/><app><const name="eval_bin" local="true"><fun><type name="Int.int"/><type name="operator" local="true"/><type name="Int.int"/><type name="Int.int"/></fun></const><var name="c1"><type name="Int.int"/></var><var name="op"><type name="operator" local="true"/></var><var name="c2"><type name="Int.int"/></var></app><app><const name="eval_expr" local="true"><fun><fun><type name="ident" local="true"/><type name="Int.int"/></fun><type name="expr" local="true"/><type name="Int.int"/></fun></const><var name="s2"><fun><type name="ident" local="true"/><type name="Int.int"/></fun></var><app><const name="Ebin" local="true"><fun><type name="expr" local="true"/><type name="operator" local="true"/><type name="expr" local="true"/><type name="expr" local="true"/></fun></const><var name="x1"><type name="expr" local="true"/></var><var name="op"><type name="operator" local="true"/></var><var name="x2"><type name="expr" local="true"/></var></app></app></app></concls></lemma></theory>