// Modelo abstracto de um sistema de emissão de cartões bancários

abstract sig Status {}
one sig Unissued, Issued, Cancelled extends Status {}

sig Card {
	var status : one Status
}

sig Client {
	var cards : set Card
}

// Algumas das propriedades desejadas para o sistema

assert NoUnissuedCards {
  	always Unissued not in Client.cards.status
}

assert NoSharedCards {
	always all disj x, y : Client, c : x.cards | always (c not in y.cards)
}

assert AllCancelled {
	all c : Card | always (c.status = Issued implies eventually c.status = Cancelled)
}

// Especifique as condições iniciais do sistema

fact Init {
	no cards
	no status.Cancelled + status.Issued
}

/* Especifique as operações do sistema por forma a garantir as propriedades de segurança */

check NoUnissuedCards
check NoSharedCards

// Operação de emitir um cartão para um cliente
pred emit [c : Card, a : Client] {
	c.status in Unissued
	/*
	c.status  = Unissued
	c.status' = Issued
	all c1 : Card - c | c1.status' = c1.status
	*/
	status' = status + (c->Issued) - (c->Unissued)
	cards'  = cards  + a->c

}

// Operação de cancelar um cartão
pred cancel [c : Card] {
	c.status in Issued
	status' = status + (c->Cancelled) - (c->Issued)
	cards'	= cards - Client->c

}

pred nop {
	status' = status
	cards'  = cards
}

fact Traces {
	always (nop or some c : Card | cancel[c] or some a : Client | emit[c,a])
}

// Especifique um cenário onde 3 cartões são emitidos a pelo menos 2
// clientes e são todos inevitavelmente cancelados, usando os scopes
// para controlar a cardinalidade das assinaturas
// Tente também definir um theme onde os cartões emitidos são verdes
// e os cancelados são vermelhos, ocultando depois toda a informação que
// seja redundante
// Pode introduzir definições auxiliares no modelo se necessário

run Exemplo {
	eventually Client in cards.Card
	eventually Card.status = Cancelled
} for exactly 3 Card, exactly 2 Client

fun cancelled [] : set Card {
    status.Cancelled
}

fun issued [] : set Card {
    status.Issued
}

fun unissued [] : set Card {
    status.Unissued
}

// Especifique as condições de justiça estritamente necessárias para garantir a
// propriedade de animação

/* FAIRNESS */

pred emitEnabled [c: Card,  a: Client] { c.status in Unissued }
pred cancelEnabled [c: Card] { c.status in Issued }

fact Fairness {
	all c: Card, a: Client {
    	(eventually always emitEnabled[c, a]) implies (always eventually emit[c, a])
    	(eventually always cancelEnabled[c]) implies (always eventually cancel[c])
    }
}

check AllCancelled
