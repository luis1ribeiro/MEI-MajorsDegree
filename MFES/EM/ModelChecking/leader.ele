open util/ordering[Id]

sig Node {
	id: one Id,
	succ: one Node,
	var inbox: set Id,
	var outbox: set Id
}

/* Noção de ordem em Id */
sig Id{}

fact ring {
	all i : Id | lone id.i
	/* noção de anel */
	all n : Node | Node in n.^succ
}

/* Podia fazer um sig elected com um fact, mas a análise é mais lenta do que fun */
fun elected :set Node {
	{ n : Node | once n.id in n.inbox } // Se alguma vez um nodo recebeu o seu prórprio id, é considerado eleito
}

/*
pred send [n: Node]{
	some i: n.outbox { // Tem que haver alguma coisa na outbox
		n.outbox' = n.outbox - i
		n.succ.inbox' = n.succ.inbox + i
	}
	// Exceções - Frame conditions
	all m: Node - n.succ | m.inbox' = m.inbox
	all m: Node - n | m.outbox' = m.outbox
}*/

pred send [n: Node]{
	some i: n.outbox {
		/* vai ficar com menos um tuplo */
		outbox' = outbox - n->i
		/* vai ficar com mais um tuplo */
		inbox' 	= inbox + n.succ->i
	}
}

/* Abstração da ordem de troca de mensagens */
/*pred compute [n : Node] {
	some i : n.inbox { // Tem que haver alguma coisa na inbux
		n.inbox'= n.inbox - i
		n.outbox'= n.outbox + (i - n.id.*(~next)) // n.id.*(~next) é o conjunto de todos os ids menor ou igual ao n.id
												  // next é id do proximo id
	}
	// Exceções - Frame conditions
	all m : Node - n | m.inbox'= m.inbox
	all m : Node - n | m.outbox'= m.outbox
}*/

pred compute [n : Node] {
	some i : n.inbox {
		inbox'= inbox - n->i
		lte[i,n.id] implies outbox' = outbox else outbox' = outbox + n->i
	}
}


pred skip {
	inbox' = inbox
	outbox' = outbox
}

fact init {
	no inbox
	outbox = id
}

fact transictions {
	/* o skip é obrigatório no caso do 'nada acontece' */
	always (skip or some n : Node | send[n] or compute[n])
}

run {}
run scenario1 {eventually some elected} for 3 Id, exactly 3 Node, exactly 6 steps
run scenario2 {eventually some elected} for 4 Id, exactly 4 Node, exactly 8 steps

assert safety {
	always lone elected
}

check safety

/* FAIRNESS */
pred sendEnabled [n: Node] {
	some n.outbox
}

pred computeEnabled [n: Node] {
	some n.inbox
}

pred fairness {
	all n : Node {
		/* WEAK FAIRNESS */
		(eventually always sendEnabled[n]) implies (always eventually send[n])
		(eventually always computeEnabled[n]) implies (always eventually compute[n])
	}
}

/* Só com safety pode ser redundante, porque o programa pode não fazer nada. O liveness obriga a eleição de um líder */
assert liveness {
	some Node implies eventually some elected
}

/*
assert liveness {
	fairness implies eventually some elected
}
*/

check liveness
