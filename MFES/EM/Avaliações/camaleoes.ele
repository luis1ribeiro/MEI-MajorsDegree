/*
Complete o seguinte modelo de uma colónia de camaleões onde o número de
camaleões é fixo mas onde a cor de cada camaleão pode mudar de acordo com
as seguintes regras:
- As cores possíveis são Verde, Azul e Amarelo
- Se 2 camaleões de cores diferentes se encontram mudam ambos para a terceira cor
- As cores só se alteram na situação acima
*/

abstract sig Color {}
one sig Green, Blue, Yellow extends Color {}

sig Camaleao {
	var cor : one Color
}

pred nop {
	cor' = cor
}

pred encontro[x,y : Camaleao] {
	no (x.cor & y.cor)
	cor' = cor ++ (x->(Color - (x.cor + y.cor))) ++ (y->(Color - (x.cor + y.cor)))
}

fact Comportamento {
	always (nop or some x,y : Camaleao | encontro[x,y])
}

// Especifique as seguintes propriedades desta colónia

assert Estabilidade {
	// Se os camaleoes ficarem todos da mesma cor, as cores nunca mais mudam
	always (Camaleao.cor = Green or Camaleao.cor = Blue or Camaleao.cor = Yellow implies cor' = cor)

}

check Estabilidade for 5

assert NaoConvergencia {
	// Se inicialmente há um camaleao verde e nenhum azul então não é possível
	// que a colónia fique toda amarela
	/* Penso que não posso por no (Yellow & Camaleao.cor) porque Yellow é um one sig */
	one cor.Green and Blue not in Camaleao.cor implies always Yellow != Camaleao.cor
}

check NaoConvergencia for 5

// Especifique um cenário onde existe um camaleao que não para de mudar de cor
// tomando recorrentemente todas as cores possíveis

run Exemplo {
	some c: Camaleao {
		always eventually c.cor' != c.cor
		eventually c.cor = Green
		eventually c.cor = Yellow
		eventually c.cor = Blue
	}
}

fun green [] : set Camaleao { cor.Green }
fun blue [] : set Camaleao { cor.Blue }
fun yellow [] : set Camaleao { cor.Yellow }
