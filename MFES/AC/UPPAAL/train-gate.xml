<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*
 * For more details about this example, see
 * "Automatic Verification of Real-Time Communicating Systems by Constraint Solving",
 * by Wang Yi, Paul Pettersson and Mats Daniels. In Proceedings of the 7th International
 * Conference on Formal Description Techniques, pages 223-238, North-Holland. 1994.
 */

/* Declarações globais */

const int N = 2;         // # trains
typedef int[0,N-1] id_t;

chan        appr[N], stop[N], leave[N]; /* ações sincronizadas complementares e indexadas por cada i comboio (i até N). */
urgent chan go[N]; /* ação urgente -&gt; no delay */
</declaration>
	<template>
		<name x="40" y="16">Train</name>
		<parameter>const id_t id</parameter>
		<declaration>/* Declaração local do Train */
clock x; </declaration>
		<location id="id0" x="51" y="34">
			<name x="3" y="18">Safe</name>
		</location>
		<location id="id1" x="131" y="258">
			<name x="147" y="266">Stop</name>
		</location>
		<location id="id2" x="211" y="34">
			<name x="227" y="18">Cross</name>
			<label kind="invariant" x="227" y="34">x&lt;=5</label>
		</location>
		<location id="id3" x="51" y="170">
			<name x="-13" y="154">Appr</name>
			<label kind="invariant" x="-13" y="170">x&lt;=20</label>
		</location>
		<location id="id4" x="211" y="170">
			<name x="227" y="154">Start</name>
			<label kind="invariant" x="227" y="170">x&lt;= 15</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="139" y="98">x&gt;=10</label>
			<label kind="assignment" x="139" y="114">x=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="43" y="218">x&lt;=10</label>
			<label kind="synchronisation" x="43" y="234">stop[id]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="139" y="-6">x&gt;=3</label>
			<label kind="synchronisation" x="139" y="10">leave[id]!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-13" y="66">appr[id]!</label>
			<label kind="assignment" x="-13" y="82">x=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="219" y="98">x&gt;=7</label>
			<label kind="assignment" x="219" y="114">x=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="179" y="218">go[id]?</label>
			<label kind="assignment" x="179" y="234">x=0</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Gate</name>
		<declaration>/* Declaração local Gate */
id_t list[N+1];
int[0,N] len; /* Por default inicial, len = 0 */

// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration>
		<location id="id5" x="192" y="360">
			<committed/>
		</location>
		<location id="id6" x="192" y="264">
			<name x="208" y="264">Occ</name>
		</location>
		<location id="id7" x="192" y="128">
			<name x="208" y="96">Free</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="select" x="104" y="288">e : id_t</label>
			<label kind="synchronisation" x="104" y="304">appr[e]?</label>
			<label kind="assignment" x="104" y="320">enqueue(e)</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="select" x="296" y="152">e : id_t</label>
			<label kind="guard" x="296" y="168">e == front()</label>
			<label kind="synchronisation" x="296" y="184">leave[e]?</label>
			<label kind="assignment" x="296" y="200">dequeue()</label>
			<nail x="288" y="264"/>
			<nail x="288" y="128"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="224" y="304">stop[tail()]!</label>
			<nail x="216" y="312"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="104" y="168">len &gt; 0</label>
			<label kind="synchronisation" x="104" y="184">go[front()]!</label>
			<nail x="96" y="128"/>
			<nail x="96" y="264"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="200" y="152">e : id_t</label>
			<label kind="guard" x="200" y="168">len == 0</label>
			<label kind="synchronisation" x="200" y="184">appr[e]?</label>
			<label kind="assignment" x="200" y="200">enqueue(e)</label>
		</transition>
	</template>
	<system>/* Podiamos declarar os trains individualmente */
// train0 = Train(0)
// train1 = Train(1)

/* Quais os templates de sistemas a executar em paralelo. */
system Train, Gate;</system>
	<queries>
		<query>
			<formula>
			</formula>
			<comment>===== Validation Properties:
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Gate.Occ
			</formula>
			<comment>Gate can receive (and store in queue) msg's from approaching trains.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross
			</formula>
			<comment>Train 0 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(1).Cross
			</formula>
			<comment>Train 1 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and Train(1).Stop
			</formula>
			<comment>Train 0 can be crossing bridge while Train 1 is waiting to cross.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and (forall (i : id_t) i != 0 imply Train(i).Stop)
			</formula>
			<comment>Train 0 can cross bridge while the other trains are waiting to cross.
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Safety Properties:
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_t) forall (j : id_t) Train(i).Cross &amp;&amp; Train(j).Cross imply i == j
			</formula>
			<comment>There is never more than one train crossing the bridge (at
any time instance). → SAFETY
			</comment>
		</query>
		<query>
			<formula>A[] Gate.list[N] == 0
			</formula>
			<comment>There can never be N elements in the queue (thus the array will not overflow).
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Liveness Properties:
			</comment>
		</query>
		<query>
			<formula>Train(0).Appr --&gt; Train(0).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross. → LIVENESS
			</comment>
		</query>
		<query>
			<formula>Train(1).Appr --&gt; Train(1).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross. → LIVENESS</comment>
		</query>
		<query>
			<formula>Train(2).Appr --&gt; Train(2).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross. → LIVENESS	</comment>
		</query>
		<query>
			<formula>Train(3).Appr --&gt; Train(3).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross. → LIVENESS</comment>
		</query>
		<query>
			<formula>Train(4).Appr --&gt; Train(4).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross. → LIVENESS</comment>
		</query>
		<query>
			<formula>Train(5).Appr --&gt; Train(5).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross. → LIVENESS</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Deadlock checking:
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>The system is deadlock-free.
			</comment>
		</query>
	</queries>
</nta>
